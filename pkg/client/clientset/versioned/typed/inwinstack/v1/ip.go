/*
Copyright Â© 2018 Kyle Bai(kyle.b@inwinstack.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/inwinstack/ipam-operator/pkg/apis/inwinstack/v1"
	scheme "github.com/inwinstack/ipam-operator/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// IPsGetter has a method to return a IPInterface.
// A group's client should implement this interface.
type IPsGetter interface {
	IPs(namespace string) IPInterface
}

// IPInterface has methods to work with IP resources.
type IPInterface interface {
	Create(*v1.IP) (*v1.IP, error)
	Update(*v1.IP) (*v1.IP, error)
	UpdateStatus(*v1.IP) (*v1.IP, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.IP, error)
	List(opts metav1.ListOptions) (*v1.IPList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.IP, err error)
	IPExpansion
}

// iPs implements IPInterface
type iPs struct {
	client rest.Interface
	ns     string
}

// newIPs returns a IPs
func newIPs(c *InwinstackV1Client, namespace string) *iPs {
	return &iPs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the iP, and returns the corresponding iP object, and an error if there is any.
func (c *iPs) Get(name string, options metav1.GetOptions) (result *v1.IP, err error) {
	result = &v1.IP{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("ips").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of IPs that match those selectors.
func (c *iPs) List(opts metav1.ListOptions) (result *v1.IPList, err error) {
	result = &v1.IPList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("ips").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested iPs.
func (c *iPs) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("ips").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a iP and creates it.  Returns the server's representation of the iP, and an error, if there is any.
func (c *iPs) Create(iP *v1.IP) (result *v1.IP, err error) {
	result = &v1.IP{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("ips").
		Body(iP).
		Do().
		Into(result)
	return
}

// Update takes the representation of a iP and updates it. Returns the server's representation of the iP, and an error, if there is any.
func (c *iPs) Update(iP *v1.IP) (result *v1.IP, err error) {
	result = &v1.IP{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("ips").
		Name(iP.Name).
		Body(iP).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *iPs) UpdateStatus(iP *v1.IP) (result *v1.IP, err error) {
	result = &v1.IP{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("ips").
		Name(iP.Name).
		SubResource("status").
		Body(iP).
		Do().
		Into(result)
	return
}

// Delete takes name of the iP and deletes it. Returns an error if one occurs.
func (c *iPs) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("ips").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *iPs) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("ips").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched iP.
func (c *iPs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.IP, err error) {
	result = &v1.IP{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("ips").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
